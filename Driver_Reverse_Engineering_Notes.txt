Settings Windows Symbols:

set _NT_SYMBOL_PATH=SRV *D:\Windows10_Symbols*http://msdl.microsoft.com/download/symbols
SRV*D:\Windows10_Symbols*http://msdl.microsoft.com/download/symbols
kd -k com:pipe,port=\\.\pipe\windows10dbg,resets=0,reconnect

@echo off
set _NT_SYMBOL_PATH=SRV *D:\Windows10_Symbols*http://msdl.microsoft.com/download/symbols
"C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\kd.exe" -k com:pipe,port=\\.\pipe\windows10dbg,resets=0,reconnect


I ran into a problem when trying to use the deferred loading mode... 
By executing the next two commands I realized the problem was http://msdl.microsoft.com/download/symbols

!sym noisy
.reload nt

So I installed manually the symbols and then switched the source to apropiate folder:

.sympath F:\Windows10_Symbols
.reload


Microsoft PDB Symbols in IDA:

_NT_SYMBOL_PATH=SRV*c:\symbols*https://msdl.microsoft.com/download/symbols

https://amk1.wordpress.com/2009/11/26/loading-symbols-in-ida-pro/
Loading symbols in IDA Pro
IDA Pro has included symbol loading facility some time back. But different installations had yield different results; sometimes symbol loading works, sometimes it didn’t. This has led me to scratch my head for an extended period of time until now.

What happened is when IDA ask the following:

IDA Pro has determined that the input file was linked with debug information. Do you want to look for the corresponding PDB file at the local symbol store and the Microsoft Symbol Server?

it made use of its dbghelp.dll and symsrv.dll to load the symbols. We are supposed to accept Microsoft’s terms for using their symbols, but since symsrv.dll is used directly by the plugin the prompt to accept the terms is not displayed, the license cannot be accepted, and hence the symbol loading fails.

The solution is to include an empty symsrv.yes file alongside symsrv.dll in IDA’s directory to indicate that we’d gladly accept the terms that never appear.




=========================================================================================================

Setup Network Debugger 

bcdedit /debug on
bcdedit /dbgsettings net hostip:192.168.0.10 port:50002 key:1.2.3.4
bcdedit /set "{dbgsettings}" busparams 1.0.0
bcdedit /set {bootmgr} displaybootmenu yes
pause



REM Adds a new boot entry with the Description as "DebugEntry"
bcdedit /copy {current} /d "DebugEntry"   
REM Set debug on the new entry
bcdedit /debug {bed52458-f8b5-11e5-9bdc-005056c00008} on
REM Configure the network debugger host
bcdedit /dbgsettings net hostip:10.10.10.2 key:1.2.3.4 port:50002
REM set the appropriate PCI bus device function for the network interface used
bcdedit /set "{dbgsettings}" busparams 3.0.1
REM Enable the displaybootmenu so we can select which entry we want to boot 
bcdedit /set {bootmgr} displaybootmenu yes

=========================================================================================================

NTStatus codes: ftp://ztchs.p.lodz.pl/WDInf/Programy/Dev-Cpp/include/ddk/ntstatus.h

I/O Completion Routines:

There are only 3 valid return codes from an I/O Completion Routine:

STATUS_SUCCESS 0x00000000
STATUS_MORE_PROCESSING_REQUIRED (0xC0000016)
STATUS_CONTINUE_COMPLETION:


 If a driver returns anything except STATUS_PENDING in its dispatch routine, the IRP being dispatched will be completed by the I/O manager. 

References:
https://www.osronline.com/article.cfm?article=214
https://www.osronline.com/article.cfm?article=83
https://www.osronline.com/article.cfm?article=87

dt _IO_STACK_LOCATION
   +0x000 MajorFunction    : UChar
   +0x001 MinorFunction    : UChar
   +0x002 Flags            : UChar
   +0x003 Control          : UChar
   +0x004 Parameters       : __unnamed
		+0x000 OutputBufferLength : Uint4B
        +0x004 InputBufferLength : Uint4B
        +0x008 IoControlCode    : Uint4B
        +0x00c Type3InputBuffer : Ptr32 Void
   +0x014 DeviceObject     : Ptr32 _DEVICE_OBJECT
   +0x018 FileObject       : Ptr32 _FILE_OBJECT
   +0x01c CompletionRoutine : Ptr32    
   +0x020 Context          : Ptr32 Void


ntdll!_IRP
   +0x000 Type             : Int2B
   +0x002 Size             : Uint2B
   +0x004 MdlAddress       : Ptr32 _MDL
   +0x008 Flags            : Uint4B
   +0x00c AssociatedIrp    : __unnamed
   +0x010 ThreadListEntry  : _LIST_ENTRY
   +0x018 IoStatus         : _IO_STATUS_BLOCK
   +0x020 RequestorMode    : Char
   +0x021 PendingReturned  : UChar
   +0x022 StackCount       : Char
   +0x023 CurrentLocation  : Char
   +0x024 Cancel           : UChar
   +0x025 CancelIrql       : UChar
   +0x026 ApcEnvironment   : Char
   +0x027 AllocationFlags  : UChar
   +0x028 UserIosb         : Ptr32 _IO_STATUS_BLOCK
   +0x02c UserEvent        : Ptr32 _KEVENT
   +0x030 Overlay          : __unnamed
   +0x038 CancelRoutine    : Ptr32     void 
   +0x03c UserBuffer       : Ptr32 Void
   +0x040 Tail             : __unnamed

   [Inputbuff , inputbufflen, outputbufff, outputbuflen]
   
   
   
Driver Security:
+] Protecting Drivers: http://www.osronline.com/article.cfm?article=100
+] http://blackwhitemu.blogspot.com.ar/2007/10/how-safe-is-your-device-namespace.html
+] http://www.osronline.com/article.cfm?article=56
+] http://www.osronline.com/article.cfm?article=50
+] http://www.osronline.com/article.cfm?article=23

   
Useul Windbg Commands:
=====================

+] .logopen <filename> 
+] .logappend <filename>
+] .logclose
Note: If you use the /t option, the date and time are appended to your specified file name.


+] Dump with Ranges:

    dd esp L?0x200

+] Dumping SSDT:

	dds poi(nt!KeServiceDescriptorTable) L poi(nt!KeServiceDescriptorTable+8)
	
	dds poi(nt!KeServiceDescriptorTableShadow+10) L poi(nt!KeServiceDescriptorTableShadow+18)
	

+] !object \ObjectTypes		-> Lists Objects Types

+] !object \Driver          -> List all the Driver objects

+] !object \Device 			-> List All the Devices objects

+] !object ffffe001b9702560    -> Identifies the Object

	Object: ffffe001b9702560  Type: (ffffe001b89c5f20) UserApcReserve
		ObjectHeader: ffffe001b9702530 (new version)
		HandleCount: 1  PointerCount: 1
		
+] dt _OBJECT_TYPE ffffe001b89c5f20	

+] Resolving SYSCALLS in Windows x64
	
	1) First Get the Base of the KiServiceTable:
		dps nt!KeServiceDescriptorTable 
		fffff801`4dbc6a80  fffff801`4d9c9a00 nt!KiServiceTable
		
		KiServiceTable Base: fffff8014d9c9a00
	
	2) Get the Index of the SYSCALL by Dumping the ntdll CALL
		Example: 0x70
	
	3) Get the Value from the Table:
		kd> dd nt!KiServiceTable + (0x70*4) L1
		fffff801`4d9c9bc0  03c34d40
		
		Value: 03c34d40 --> This has encoded the offset and the number of arguments
		
	4) Decode the offset and add it to the KiServiceTable Base:
	
		FUNCTION ADDRESS = 03c34d40>>4 + fffff8014d9c9a00 = FFFFF8014DD8CED4
		
+] Command to Debug specific process from Kernel Mode debugger:

	.process /r /p ffffe001e9274080
	
	To set a breakpoint in usermode from kernel debugger:
	
	.process /r /p <eprocess>
	.reload -user
	bp /p <eprocess> kernel32!CreateFileA



+] Some Windbg conditional breakpoints and instructions to perform:

ba e 1 87F3BD88 ".if ( @ = 0x0e) {.echo IOCTL Operation found} .else {gc}"

ba e 1 87ED889D ".if ((poi(ebx) & 0x0`0000000f) = 0xe)  { .echo IOCTL Operation found } .else {gc}"

ba e 1 8D74F7C0 ".printf \"Size: %08x \\n\", dwo(poi(esp+8)+C);"


Using $t0 register:

ba e 1 8D74F7C0 "r @$t0 = (poi(esp+8)+C) ;.printf \"%08x \\n\", dwo($t0);" ///dwo() actually access to the memory address content at $t0

// DxgkDdiEscape()
ba e 1 8cf4e7c0 "r @$t0 = poi((poi(esp+8)+C)); .printf \"Size of data: %08x \\n\", $t0; r @$t0 = $t0/4;  r @$t1 = poi((poi(esp+8)+8));  dd $t1 L?$t0;"

Note: there are $t0-$t20 user registers to use


ba e 1 ntdll!RtlpWalkHeap "r @$t0 = (poi(rdx)); .if (@$t0 != 0x386f80)  {.printf \"ChunkPtr: %08x \\n\", qwo(rdx); gc; } .else { .echo Chunk Found }"


///////////////////////

+] !threads --> to list all the application threads

+] ~~[threadID]e <command> --> to execute a command over the given thread
   For instance: ~~[0x101]e kb  --> shows the call stack of the thread 0x101

	
+] Get PxE from VirtualAddress:
------------------------------

def get_pxe(address):
    result = address>>9
    result = result | 0xFFFFF68000000000
    result = result & 0xFFFFF6FFFFFFFFF8
    return result

print hex(get_pxe(0xfffff6fb44020100))


+] Detect Debuggers:

Windows provides support for detecting and defeating the debuggers inside kernel. You can use exported variable KdDebuggerEnabled of ntoskrnl to detect if the machine is being debugged by kernel debugger. The good place to perform this check in the DriverEntry routine of your driver.

The nt!KdDebuggerNotPresent global variable will be set to zero if a debugger is present. If a debugger is not present, the value will be one (default).



== NDIS Driver Programming ==

NDIS Filter Drivers: https://msdn.microsoft.com/en-us/library/windows/hardware/ff565501(v=vs.85).aspx

Security Issues for Network Drivers: https://msdn.microsoft.com/en-us/library/windows/hardware/ff570745(v=vs.85).aspx

NET_BUFFER Architecture: https://msdn.microsoft.com/en-us/library/windows/hardware/ff568377(v=vs.85).aspx

Introduction To NDIS Filter Drivers: https://msdn.microsoft.com/en-us/library/windows/hardware/ff556030(v=vs.85).aspx

NDIS Filter Driver Reference: https://msdn.microsoft.com/en-us/library/windows/hardware/ff565527(v=vs.85).aspx

Writing NDIS Filter Drivers: https://msdn.microsoft.com/en-us/library/windows/hardware/ff571103(v=vs.85).aspx


Enum MiniFilter Drivers:

# fltmc --> list filter drivers
# fltmc instances --> show instances
# sc query <instance-name> 


+] IDT on Every Processor:

Each CPU has its own IDT, and they can be viewed by the WinDBG command !kdex2x86.idt

+] To see the IRQL of the code you were:

> !irql


+] Some useful Linux debugging commands:

# strace -f ./binary

 echo "set dis intel" > ~/.gdbinit

# gdb ./binary
>> set follow-fork-mode child
>> set disassembly-flavor intel
>> tui enable
>> set layout asm
>> r



0: kd> r $t0 = 0; .while (0x37 > @$t0) { r $t0; dd Driver+2092F0+28*$t0 L?0x01; r $t0 = @$t0+1; }
$t0=0000000000000000
fffff80f`da8092f0  00000000
$t0=0000000000000001
fffff80f`da809318  e4400001
$t0=0000000000000002
fffff80f`da809340  e4400002
$t0=0000000000000003
fffff80f`da809368  e440000c
$t0=0000000000000004
fffff80f`da809390  e440000d
$t0=0000000000000005
fffff80f`da8093b8  e4400006
$t0=0000000000000006
fffff80f`da8093e0  e4400064
$t0=0000000000000007
fffff80f`da809408  e4400008
$t0=0000000000000008
fffff80f`da809430  e4400007
$t0=0000000000000009
fffff80f`da809458  e440000b
$t0=000000000000000a
fffff80f`da809480  e4400066
$t0=000000000000000b
fffff80f`da8094a8  e4400069
$t0=000000000000000c
fffff80f`da8094d0  e440000e
$t0=000000000000000d
fffff80f`da8094f8  e440000f
$t0=000000000000000e
fffff80f`da809520  e4400013
$t0=000000000000000f
fffff80f`da809548  e4400025
$t0=0000000000000010
fffff80f`da809570  e4400055
$t0=0000000000000011
fffff80f`da809598  e440001c
$t0=0000000000000012
fffff80f`da8095c0  e4400004
$t0=0000000000000013
fffff80f`da8095e8  e440004b
$t0=0000000000000014
fffff80f`da809610  e4400051
$t0=0000000000000015
fffff80f`da809638  e440001d
$t0=0000000000000016
fffff80f`da809660  e440001e
$t0=0000000000000017
fffff80f`da809688  e440001f
$t0=0000000000000018
fffff80f`da8096b0  e4400024
$t0=0000000000000019
fffff80f`da8096d8  e440005d
$t0=000000000000001a
fffff80f`da809700  e440002e
$t0=000000000000001b
fffff80f`da809728  e4400057
$t0=000000000000001c
fffff80f`da809750  e4400056
$t0=000000000000001d
fffff80f`da809778  e4400052
$t0=000000000000001e
fffff80f`da8097a0  e4400053
$t0=000000000000001f
fffff80f`da8097c8  e4400058
$t0=0000000000000020
fffff80f`da8097f0  e4400029
$t0=0000000000000021
fffff80f`da809818  e440004f
$t0=0000000000000022
fffff80f`da809840  e4400050
$t0=0000000000000023
fffff80f`da809868  e4400020
$t0=0000000000000024
fffff80f`da809890  e4400022
$t0=0000000000000025
fffff80f`da8098b8  e440004e
$t0=0000000000000026
fffff80f`da8098e0  e4400059
$t0=0000000000000027
fffff80f`da809908  e4400075
$t0=0000000000000028
fffff80f`da809930  e440007c
$t0=0000000000000029
fffff80f`da809958  e4400063
$t0=000000000000002a
fffff80f`da809980  e440005a
$t0=000000000000002b
fffff80f`da8099a8  e4400005
$t0=000000000000002c
fffff80f`da8099d0  e4400009
$t0=000000000000002d
fffff80f`da8099f8  e440001a
$t0=000000000000002e
fffff80f`da809a20  e440006c
$t0=000000000000002f
fffff80f`da809a48  e440007b
$t0=0000000000000030
fffff80f`da809a70  e440007d
$t0=0000000000000031
fffff80f`da809a98  e4400077
$t0=0000000000000032
fffff80f`da809ac0  e4400078
$t0=0000000000000033
fffff80f`da809ae8  e4400080
$t0=0000000000000034
fffff80f`da809b10  e4400011
$t0=0000000000000035
fffff80f`da809b38  e440000a
$t0=0000000000000036
fffff80f`da809b60  e440007f


NDIS WINDBG DEBUGGER EXTENSION::
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-ndiskd-netadapter
.load ndiskd
!ndiskd.netadapter 
!ndiskd.netadapter -handle <miniportHandle> -basic

A driver is only allowed to cancel IRPs that it has allocated and sent to a lower levle driver. It must not try to cancel any IRPs sent to it by the I/O Manager or by a higher level driver.

+] RtlCreateSecurityDescriptor:	
	
A successful call to this routine initializes a security descriptor. The fields in this descriptor are set to initial values that indicate that there are no security constraints.
	
+] The I/O manager determines that an I/O operation is using direct I/O as follows:+

For IRP_MJ_READ and IRP_MJ_WRITE requests, DO_DIRECT_IO is set in the Flags member of the DEVICE_OBJECT structure. For more information, see Initializing a Device Object.

For IRP_MJ_DEVICE_CONTROL and IRP_MJ_INTERNAL_DEVICE_CONTROL requests, the IOCTL code's value contains METHOD_IN_DIRECT or METHOD_OUT_DIRECT as the TransferType value in the IOCTL value. For more information, see Defining I/O Control Codes.


JAE/JNB - Jump if above or equal/Jump if not below
Jumps if the carry flag is not set. This always occurs if the first operand is higher as an unsigned integer (so a most significant bit of 1 is interpreted as 2^7 higher rather than a minus sign)

JA/JNBE - Jump if above / Jump if not below or equal
Jumps if the carry flag is not set and the z flag is not set. Checks for above the same way as JA, but makes sure they aren&#39;t equal as well.

JB/JNAE - Jump if below / Jump if not above or equal
Jumps if the carry flag is set. This occurs whenever the first operand is lower, since then the result would be below 0 but wraps around to high numbers.

JBE/JNA - Jump if below or equal / Jump if not above
Jumps if the carry flag is set or the z flag is set. Since the carry flag only tells us that the first one is below, we must check the z flag as well to check if they are equal.


MmMapLockedPagesSpecifyCache

If AccessMode is UserMode, be aware of the following details:

The routine returns a user address that is valid in the context of the process 
in which the driver is running. For example, if a 64-bit driver is running in 
the context of a 32-bit application, the buffer is mapped to an address in the 
32-bit address range of the application.

MmUnmapLockedPages

Note that if the call to MmMapLockedPages or MmMapLockedPagesSpecifyCache 
specified user mode, the caller must be in the context of the original process 
before calling MmUnmapLockedPages. This is because the unmapping operation 
occurs in the context of the calling process, and, if the context is incorrect, 
the unmapping operation could delete the address range of a random process.



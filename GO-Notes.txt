// https://research.swtch.com/goabstract
// https://research.swtch.com/godata
// https://research.swtch.com/interfaces

struct string {
	char *str;
	uint_64 len;
}

A slice is a reference to a section of an array. In memory, it is a 3-word structure contaning a pointer to the first element, the length of the slice, and the capacity. The length is the upper bound for indexing operations like x[i] while the capacity is the upper bound for slice operations like x[i:j].

struct slice {
	char *str;
	uint_64 length;
	uint_64 capacity;
}

struct Interface {
	PVOID runtimeType;
	PVOID data;
}

	Example:

		type T struct {
		   X int8
		   Y int8
		}

		var e interface{} = &T{Y:100, X:42}

		[ T Type | Pointer to T instance ]


goroutines are compiled to the next thing:

mov [rsp+0x10], first param
mov [rsp+0x08], offset offset routine
mov [rsp], 8 -> numbers of bytes to copy into the new stack. // 8 because x64 and just one param of an 8bytes type
call runtime_newproc


Return values do not come in RAX, but are written into the stack position above the Return Address of the function -> the callee writes into the caller stack
All functions that return values also return an error, it's not unusual to find the next instructions after the call of a function:

func sayHello(mystr string) string {
	var t string = "Hello " + mystr
	return t
}

lea rax, offset str_world
mov [rsp], rax
mov [rsp+8], 6 // len("world ")
call main_sayHello
mov rax, [rsp+0x10] // result
mov rcx, [rsp+0x18] // error

If the routine doesn't receive parameters, the intructions are like the next ones:

call main_sayHello  
mov rax, [rsp] // result
mov rcx, [rsp+0x08] // error



Go has two data structure creation functions: new and make. The distinction is a common early point of confusion but seems to quickly become natural. The basic distinction is that new(T) returns a *T, a pointer that Go programs can dereference implicitly (the black pointers in the diagrams), while make(T, args) returns an ordinary T, not a pointer. Often that T has inside it some implicit pointers (the gray pointers in the diagrams). New returns a pointer to zeroed memory, while make returns a complex structure.



var Typ = []*Basic{
	Invalid: {Invalid, 0, "invalid type"},

	Bool:          {Bool, IsBoolean, "bool"},
	Int:           {Int, IsInteger, "int"},
	Int8:          {Int8, IsInteger, "int8"},
	Int16:         {Int16, IsInteger, "int16"},
	Int32:         {Int32, IsInteger, "int32"},
	Int64:         {Int64, IsInteger, "int64"},
	Uint:          {Uint, IsInteger | IsUnsigned, "uint"},
	Uint8:         {Uint8, IsInteger | IsUnsigned, "uint8"},
	Uint16:        {Uint16, IsInteger | IsUnsigned, "uint16"},
	Uint32:        {Uint32, IsInteger | IsUnsigned, "uint32"},
	Uint64:        {Uint64, IsInteger | IsUnsigned, "uint64"},
	Uintptr:       {Uintptr, IsInteger | IsUnsigned, "uintptr"},
	Float32:       {Float32, IsFloat, "float32"},
	Float64:       {Float64, IsFloat, "float64"},
	Complex64:     {Complex64, IsComplex, "complex64"},
	Complex128:    {Complex128, IsComplex, "complex128"},
	String:        {String, IsString, "string"},
	UnsafePointer: {UnsafePointer, 0, "Pointer"},

	UntypedBool:    {UntypedBool, IsBoolean | IsUntyped, "untyped bool"},
	UntypedInt:     {UntypedInt, IsInteger | IsUntyped, "untyped int"},
	UntypedRune:    {UntypedRune, IsInteger | IsUntyped, "untyped rune"},
	UntypedFloat:   {UntypedFloat, IsFloat | IsUntyped, "untyped float"},
	UntypedComplex: {UntypedComplex, IsComplex | IsUntyped, "untyped complex"},
	UntypedString:  {UntypedString, IsString | IsUntyped, "untyped string"},
	UntypedNil:     {UntypedNil, IsUntyped, "untyped nil"},
}

Runtime_newobject has the following signature:
+] func newobject(typ *byte) *any



